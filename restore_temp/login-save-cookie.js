/**
 * Скрипт для входа в систему и сохранения cookie сессии для последующего использования
 * 
 * Этот скрипт выполняет авторизацию в системе и сохраняет cookie сессии в файл cookie.txt,
 * который затем можно использовать в других скриптах для выполнения аутентифицированных запросов.
 * 
 * Использование:
 * node login-save-cookie.js
 */
import fetch from 'node-fetch';
import fs from 'fs';

// Учетные данные тестового пользователя
const USERNAME = "testuser";
const PASSWORD = "Test123!";

// URL для входа
const LOGIN_URL = "http://localhost:5000/api/users/login";

// Функция для извлечения cookie из заголовков ответа
function extractCookiesFromResponse(response) {
  const rawCookies = response.headers.raw()['set-cookie'];
  if (!rawCookies || rawCookies.length === 0) {
    return [];
  }
  
  return rawCookies.map(entry => {
    const parts = entry.split(';');
    const cookiePart = parts[0];
    const [name, value] = cookiePart.split('=');
    
    // Извлекаем domain и path
    const domain = parts.find(p => p.trim().startsWith('Domain='))?.split('=')[1]?.trim() || 'localhost';
    const path = parts.find(p => p.trim().startsWith('Path='))?.split('=')[1]?.trim() || '/';
    const expires = parts.find(p => p.trim().startsWith('Expires='))?.replace('Expires=', '')?.trim();
    
    // Проверяем флаги HttpOnly и Secure
    const httpOnly = parts.some(p => p.trim() === 'HttpOnly');
    const secure = parts.some(p => p.trim() === 'Secure');
    
    // Формируем строку в формате Netscape cookie file
    // domain flag path secure_flag expiry name value
    const expiry = expires ? Math.floor(new Date(expires).getTime() / 1000) : 0;
    
    return {
      domain: httpOnly ? `#HttpOnly_${domain}` : domain,
      flag: "FALSE",
      path,
      secure: secure ? "TRUE" : "FALSE",
      expiry: expiry || Math.floor(Date.now() / 1000) + 86400, // по умолчанию 24 часа
      name,
      value
    };
  });
}

// Функция для сохранения куки в файл
function saveCookiesToFile(cookies, filename) {
  const header = `# Netscape HTTP Cookie File
# https://curl.se/docs/http-cookies.html
# This file was generated by login-save-cookie.js script! Edit at your own risk.
`;
  
  const cookieStrings = cookies.map(cookie => {
    return `${cookie.domain}\t${cookie.flag}\t${cookie.path}\t${cookie.secure}\t${cookie.expiry}\t${cookie.name}\t${cookie.value}`;
  });
  
  fs.writeFileSync(filename, header + cookieStrings.join('\n') + '\n');
  console.log(`Cookies saved to ${filename}`);
}

// Основная функция
async function login() {
  console.log(`Logging in as ${USERNAME}...`);
  
  try {
    const response = await fetch(LOGIN_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: USERNAME,
        password: PASSWORD
      }),
      redirect: 'manual'
    });
    
    if (response.ok) {
      console.log("Login successful!");
      const userData = await response.json();
      console.log("User data:", userData);
      
      // Извлекаем куки из ответа
      const cookies = extractCookiesFromResponse(response);
      
      if (cookies.length > 0) {
        // Сохраняем куки в файл
        saveCookiesToFile(cookies, 'cookie.txt');
        console.log("Cookie file has been updated. You can now use other scripts with authentication.");
      } else {
        console.warn("No cookies found in the response. Session may not work properly.");
      }
      
      return userData;
    } else {
      const errorData = await response.text();
      console.error("Login failed:", errorData);
      return null;
    }
  } catch (error) {
    console.error("Error during login:", error);
    return null;
  }
}

// Запускаем функцию логина
login();