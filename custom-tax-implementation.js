/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞–ª–æ–≥–æ–≤ —Å–æ Stripe —Å–æ–≥–ª–∞—Å–Ω–æ
 * –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ https://docs.stripe.com/tax/custom
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
 * 1. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
 * 2. –ü–µ—Ä–µ–¥–∞—Ç—å –Ω–∞–ª–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Stripe
 * 3. –°–æ–∑–¥–∞—Ç—å PaymentIntent —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞–ª–æ–≥–∞–º–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
 * node custom-tax-implementation.js
 */

import dotenv from 'dotenv';
import fetch from 'node-fetch';

dotenv.config();

// –ó–∞–≥—Ä—É–∂–∞–µ–º Stripe API Key
const STRIPE_API_KEY = process.env.STRIPE_SECRET_KEY;
if (!STRIPE_API_KEY) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç STRIPE_SECRET_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è Stripe
async function getStripe() {
  try {
    const Stripe = (await import('stripe')).default;
    return new Stripe(STRIPE_API_KEY, {
      apiVersion: '2025-02-24.acacia',
      telemetry: false
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Stripe:', error);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ
function getTaxRateForCountry(country) {
  // –î–ª—è —Å—Ç—Ä–∞–Ω –ï–°
  const euRates = {
    'AT': 0.20, // –ê–≤—Å—Ç—Ä–∏—è
    'BE': 0.21, // –ë–µ–ª—å–≥–∏—è
    'BG': 0.20, // –ë–æ–ª–≥–∞—Ä–∏—è
    'HR': 0.25, // –•–æ—Ä–≤–∞—Ç–∏—è
    'CY': 0.19, // –ö–∏–ø—Ä
    'CZ': 0.21, // –ß–µ—Ö–∏—è
    'DK': 0.25, // –î–∞–Ω–∏—è
    'EE': 0.20, // –≠—Å—Ç–æ–Ω–∏—è
    'FI': 0.24, // –§–∏–Ω–ª—è–Ω–¥–∏—è
    'FR': 0.20, // –§—Ä–∞–Ω—Ü–∏—è
    'DE': 0.19, // –ì–µ—Ä–º–∞–Ω–∏—è
    'GR': 0.24, // –ì—Ä–µ—Ü–∏—è
    'HU': 0.27, // –í–µ–Ω–≥—Ä–∏—è
    'IE': 0.23, // –ò—Ä–ª–∞–Ω–¥–∏—è
    'IT': 0.22, // –ò—Ç–∞–ª–∏—è
    'LV': 0.21, // –õ–∞—Ç–≤–∏—è
    'LT': 0.21, // –õ–∏—Ç–≤–∞
    'LU': 0.17, // –õ—é–∫—Å–µ–º–±—É—Ä–≥
    'MT': 0.18, // –ú–∞–ª—å—Ç–∞
    'NL': 0.21, // –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
    'PL': 0.23, // –ü–æ–ª—å—à–∞
    'PT': 0.23, // –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è
    'RO': 0.19, // –†—É–º—ã–Ω–∏—è
    'SK': 0.20, // –°–ª–æ–≤–∞–∫–∏—è
    'SI': 0.22, // –°–ª–æ–≤–µ–Ω–∏—è
    'ES': 0.21, // –ò—Å–ø–∞–Ω–∏—è
    'SE': 0.25, // –®–≤–µ—Ü–∏—è
    'GB': 0.20, // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
  };

  // –î–ª—è –°–®–ê –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω - –Ω–∞–ª–æ–≥ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
  if (euRates[country]) {
    return {
      rate: euRates[country],
      type: 'vat',
      label: `VAT ${euRates[country] * 100}%`
    };
  } else if (country === 'US') {
    return {
      rate: 0,
      type: 'sales_tax',
      label: 'No Sales Tax'
    };
  } else {
    return {
      rate: 0,
      type: 'none',
      label: 'No Tax'
    };
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞–ª–æ–≥–∞–º–∏
async function createPaymentIntentWithCustomTax(productId, amount, currency, country) {
  console.log(`\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞–ª–æ–≥–∞–º–∏:`);
  console.log(`–ü—Ä–æ–¥—É–∫—Ç: ${productId}, –°—É–º–º–∞: ${amount} ${currency}, –°—Ç—Ä–∞–Ω–∞: ${country}`);
  
  const stripe = await getStripe();
  
  // –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–∞
  const taxInfo = getTaxRateForCountry(country);
  const taxAmount = Math.round(amount * taxInfo.rate);
  
  console.log(`–†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–∞: ${taxInfo.label}, –°—Ç–∞–≤–∫–∞: ${taxInfo.rate * 100}%, –°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: ${taxAmount} ${currency}`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º PaymentIntent —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Stripe Tax Custom
    // https://docs.stripe.com/tax/custom
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amount + taxAmount, // –û–±—â–∞—è —Å—É–º–º–∞ –≤–∫–ª—é—á–∞—è –Ω–∞–ª–æ–≥
      currency,
      payment_method_types: ['card'],
      metadata: {
        product_id: productId.toString(),
        base_amount: amount.toString(),
        tax_amount: taxAmount.toString(),
        tax_rate: (taxInfo.rate * 100).toString() + '%',
        tax_type: taxInfo.type,
        country,
      },
      description: `Order with ${taxInfo.label} (${taxAmount} ${currency.toUpperCase()})`,
      /* 
       * –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ª–æ–≥–∞ –≤ Stripe –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
       * –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
       */
      /* 
       * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–∞—Ä–∞–º–µ—Ç—Ä 'tax' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API
       * –ù–∞–ª–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö—Ä–∞–Ω–∏–º –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ description
       * –°–æ–≥–ª–∞—Å–Ω–æ https://docs.stripe.com/tax/custom –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PaymentIntent
       * –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –Ω–æ –æ–Ω–∏ –±—É–¥—É—Ç
       * –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É—á–µ—Ç–∞, –Ω–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
       */
    });
    
    console.log(`‚úÖ PaymentIntent —Å–æ–∑–¥–∞–Ω: ${paymentIntent.id}`);
    console.log(`‚úÖ –û–±—â–∞—è —Å—É–º–º–∞: ${paymentIntent.amount} ${paymentIntent.currency}`);
    
    if (paymentIntent.tax && paymentIntent.tax.breakdown) {
      console.log('\n–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞–ª–æ–≥–æ–≤:');
      paymentIntent.tax.breakdown.forEach((item, index) => {
        console.log(`[${index + 1}] ${item.tax_rate_display_name}: ${item.amount} ${currency.toUpperCase()}`);
      });
    }
    
    return paymentIntent;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PaymentIntent:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PaymentIntent —Å –Ω–æ–≤–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
async function updatePaymentIntentTax(paymentIntentId, country) {
  console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ PaymentIntent ${paymentIntentId}:`);
  
  const stripe = await getStripe();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PaymentIntent
    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);
    const baseAmount = parseInt(paymentIntent.metadata.base_amount || paymentIntent.amount);
    const currency = paymentIntent.currency;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã
    const taxInfo = getTaxRateForCountry(country);
    const taxAmount = Math.round(baseAmount * taxInfo.rate);
    
    console.log(`–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞: ${country}, –ù–∞–ª–æ–≥: ${taxInfo.label}, –°—Ç–∞–≤–∫–∞: ${taxInfo.rate * 100}%, –°—É–º–º–∞: ${taxAmount} ${currency}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º PaymentIntent —Å –Ω–æ–≤–æ–π –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const updatedIntent = await stripe.paymentIntents.update(paymentIntentId, {
      amount: baseAmount + taxAmount, // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
      metadata: {
        ...paymentIntent.metadata,
        tax_amount: taxAmount.toString(),
        tax_rate: (taxInfo.rate * 100).toString() + '%',
        tax_type: taxInfo.type,
        country,
      },
      description: `Order with ${taxInfo.label} (${taxAmount} ${currency})`
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–∞—Ä–∞–º–µ—Ç—Ä 'tax' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API Stripe
    });
    
    console.log(`‚úÖ PaymentIntent –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedIntent.id}`);
    console.log(`‚úÖ –ù–æ–≤–∞—è –æ–±—â–∞—è —Å—É–º–º–∞: ${updatedIntent.amount} ${updatedIntent.currency}`);
    
    return updatedIntent;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PaymentIntent:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ PaymentIntent
async function getCustomerFromPaymentIntent(paymentIntentId) {
  console.log(`\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ PaymentIntent ${paymentIntentId}:`);
  
  const stripe = await getStripe();
  
  try {
    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId, {
      expand: ['customer']
    });
    
    if (!paymentIntent.customer) {
      console.log('–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–∞–Ω–Ω–æ–º—É PaymentIntent');
      return null;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: ${paymentIntent.customer.id}`);
    
    if (typeof paymentIntent.customer === 'string') {
      // –ï—Å–ª–∏ customer - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (ID), –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const customer = await stripe.customers.retrieve(paymentIntent.customer);
      console.log(`‚úÖ Email: ${customer.email}`);
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∞: ${customer.address?.country || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      return customer;
    } else {
      // –ï—Å–ª–∏ customer —É–∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω (–æ–±—ä–µ–∫—Ç)
      console.log(`‚úÖ Email: ${paymentIntent.customer.email}`);
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∞: ${paymentIntent.customer.address?.country || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      return paymentIntent.customer;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ:', error);
    return null;
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
async function runTestScenarios() {
  // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent –¥–ª—è –ì–µ—Ä–º–∞–Ω–∏–∏ (—Å –ù–î–° 19%)
  console.log('\nüß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent –¥–ª—è –ì–µ—Ä–º–∞–Ω–∏–∏ (DE)');
  const germanPaymentIntent = await createPaymentIntentWithCustomTax(
    1, // productId
    10000, // –¶–µ–Ω–∞ 100.00 EUR (–≤ —Ü–µ–Ω—Ç–∞—Ö)
    'eur', // –í–∞–ª—é—Ç–∞
    'DE' // –°—Ç—Ä–∞–Ω–∞
  );
  
  // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent –¥–ª—è –°–®–ê (–±–µ–∑ –Ω–∞–ª–æ–≥–∞)
  console.log('\nüß™ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent –¥–ª—è –°–®–ê (US)');
  const usPaymentIntent = await createPaymentIntentWithCustomTax(
    1, // productId
    12000, // –¶–µ–Ω–∞ 120.00 USD (–≤ —Ü–µ–Ω—Ç–∞—Ö)
    'usd', // –í–∞–ª—é—Ç–∞
    'US' // –°—Ç—Ä–∞–Ω–∞
  );
  
  // –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã)
  if (germanPaymentIntent) {
    console.log('\nüß™ –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PaymentIntent - —Å–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã —Å DE –Ω–∞ FR');
    await updatePaymentIntentTax(
      germanPaymentIntent.id,
      'FR' // –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞ - –§—Ä–∞–Ω—Ü–∏—è (–ù–î–° 20%)
    );
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîß –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞–ª–æ–≥–æ–≤ —Å–æ Stripe\n');
  
  await runTestScenarios();
  
  console.log('\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('\n‚ÑπÔ∏è –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:');
  console.log('   - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞');
  console.log('   - –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–∞–ª–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ metadata –∏ description PaymentIntent');
  console.log('   - –û—Ç–æ–±—Ä–∞–∂–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–æ–≥–∞—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
  console.log('2. –î–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TaxDisplayBox');
}

main().catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error));