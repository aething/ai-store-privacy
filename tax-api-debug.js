/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—Ç–ª–∞–¥–∫–∏ API –Ω–∞–ª–æ–≥–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç:
 * 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
 * 2. –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
 * 3. –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–æ–≤
 * 4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node tax-api-debug.js DE 1000 EUR
 * node tax-api-debug.js US 5000 USD
 * node tax-api-debug.js FR 2000 EUR
 */

import fetch from 'node-fetch';
import * as util from 'util';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:5000';
const TAX_CALCULATE_ENDPOINT = '/api/tax-debug/calculate';
const PAYMENT_CREATE_ENDPOINT = '/api/create-payment-intent';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
const INSPECT_OPTIONS = {
  showHidden: false,
  depth: null,
  colors: true
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
let taxCalculationResponse = null;
let paymentIntentResponse = null;

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤–∞–ª—é—Ç—ã
 */
function formatCurrency(amount, currency = 'usd') {
  const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency.toLowerCase(),
    minimumFractionDigits: 2
  });
  
  return formatter.format(amount / 100);
}

/**
 * –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function printDivider(title = '') {
  const divider = '='.repeat(80);
  if (title) {
    console.log('\n' + divider);
    console.log(`= ${title.toUpperCase()} ${'='.repeat(77 - title.length)}`);
    console.log(divider);
  } else {
    console.log('\n' + divider);
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
 */
async function makeApiRequest(endpoint, method = 'GET', data = null) {
  const url = API_BASE_URL + endpoint;
  
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  };
  
  if (data) {
    options.body = JSON.stringify(data);
  }
  
  console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: ${url}`);
  console.log('üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:');
  console.log(util.inspect(data, INSPECT_OPTIONS));
  
  try {
    const response = await fetch(url, options);
    const contentType = response.headers.get('content-type');
    let responseData;
    
    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
    response.headers.forEach((value, key) => {
      console.log(`  - ${key}: ${value}`);
    });
    
    if (contentType && contentType.includes('application/json')) {
      responseData = await response.json();
      console.log('üì© –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (JSON):');
      console.log(util.inspect(responseData, INSPECT_OPTIONS));
    } else {
      responseData = await response.text();
      console.log('üì© –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç):');
      console.log(responseData);
    }
    
    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}`);
      if (responseData) {
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', responseData);
      }
    }
    
    return { status: response.status, data: responseData, ok: response.ok };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤
 */
async function testTaxCalculation(country, amount, currency) {
  printDivider('–¢–ï–°–¢ –†–ê–°–ß–ï–¢–ê –ù–ê–õ–û–ì–û–í');
  
  console.log(`üß™ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`  - –°—Ç—Ä–∞–Ω–∞: ${country}`);
  console.log(`  - –°—É–º–º–∞: ${formatCurrency(amount, currency)}`);
  console.log(`  - –í–∞–ª—é—Ç–∞: ${currency.toUpperCase()}`);
  
  const data = {
    country,
    amount: parseInt(amount, 10),
    currency: currency.toLowerCase()
  };
  
  const response = await makeApiRequest(TAX_CALCULATE_ENDPOINT, 'POST', data);
  taxCalculationResponse = response;
  
  if (response.ok && response.data) {
    printDivider('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê –ù–ê–õ–û–ì–û–í');
    
    const { taxAmount, taxRate, taxInclusive, totalAmount } = response.data;
    
    console.log(`‚úÖ –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:`);
    console.log(`  - –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: ${formatCurrency(amount, currency)}`);
    console.log(`  - –°—Ç–∞–≤–∫–∞ –Ω–∞–ª–æ–≥–∞: ${taxRate ? (taxRate * 100).toFixed(2) + '%' : '0%'}`);
    console.log(`  - –°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: ${formatCurrency(taxAmount || 0, currency)}`);
    console.log(`  - –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${formatCurrency(totalAmount, currency)}`);
    console.log(`  - –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–∞: ${taxInclusive ? '–î–∞' : '–ù–µ—Ç'}`);
    
    return response.data;
  } else {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤');
    return null;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤
 */
async function testPaymentIntentCreation(productId, country, currency) {
  printDivider('–¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ù–û–ì–û –ù–ê–ú–ï–†–ï–ù–ò–Ø');
  
  console.log(`üß™ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`  - ID –ø—Ä–æ–¥—É–∫—Ç–∞: ${productId}`);
  console.log(`  - –°—Ç—Ä–∞–Ω–∞: ${country}`);
  console.log(`  - –í–∞–ª—é—Ç–∞: ${currency.toUpperCase()}`);
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
  const productResponse = await makeApiRequest(`/api/products/${productId}`, 'GET');
  
  if (!productResponse.ok || !productResponse.data) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ');
    return null;
  }
  
  const product = productResponse.data;
  console.log(`üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ:`);
  console.log(`  - –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}`);
  console.log(`  - –¶–µ–Ω–∞ USD: ${formatCurrency(product.price, 'usd')}`);
  console.log(`  - –¶–µ–Ω–∞ EUR: ${formatCurrency(product.priceEUR || product.price, 'eur')}`);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
  const amount = currency.toLowerCase() === 'eur' ? product.priceEUR : product.price;
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ routes.ts
  const data = {
    amount,
    userId: 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    productId: parseInt(productId, 10),
    currency: currency.toLowerCase(),
    country
  };
  
  const response = await makeApiRequest(PAYMENT_CREATE_ENDPOINT, 'POST', data);
  paymentIntentResponse = response;
  
  if (response.ok && response.data) {
    printDivider('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ù–û–ì–û –ù–ê–ú–ï–†–ï–ù–ò–Ø');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const { clientSecret, amount: responseAmount, currency: responseCurrency } = response.data;
    const taxAmount = response.data.taxAmount || 
                      (response.data.metadata && response.data.metadata.tax_amount) || 0;
    const totalAmount = response.data.totalAmount || responseAmount;
    
    console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ:`);
    console.log(`  - Client Secret: ${clientSecret ? clientSecret.substring(0, 16) + '...' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`  - –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: ${formatCurrency(amount, responseCurrency)}`);
    console.log(`  - –°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: ${formatCurrency(taxAmount, responseCurrency)}`);
    console.log(`  - –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${formatCurrency(totalAmount, responseCurrency)}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ clientSecret
    if (clientSecret) {
      console.log(`\n‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å clientSecret –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Stripe Elements`);
    } else {
      console.error(`‚ùå Client Secret –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Stripe`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (response.data.metadata) {
      console.log('\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:');
      Object.entries(response.data.metadata).forEach(([key, value]) => {
        console.log(`  - ${key}: ${value}`);
      });
    }
    
    return response.data;
  } else {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ');
    return null;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function main() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const country = process.argv[2] || 'DE';
    const amount = process.argv[3] || '1000';
    const currency = process.argv[4] || (country === 'US' ? 'USD' : 'EUR');
    const productId = process.argv[5] || '1'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    
    printDivider('–ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log(`üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:`);
    console.log(`  - –°—Ç—Ä–∞–Ω–∞: ${country}`);
    console.log(`  - –°—É–º–º–∞: ${amount}`);
    console.log(`  - –í–∞–ª—é—Ç–∞: ${currency}`);
    console.log(`  - ID –ø—Ä–æ–¥—É–∫—Ç–∞: ${productId}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤
    const taxResult = await testTaxCalculation(country, amount, currency);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if (taxResult) {
      await testPaymentIntentCreation(productId, country, currency);
    }
    
    printDivider('–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    
    if (taxCalculationResponse && taxCalculationResponse.ok) {
      console.log('‚úÖ –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤: –£–°–ü–ï–®–ù–û');
    } else {
      console.log('‚ùå –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤: –û–®–ò–ë–ö–ê');
    }
    
    if (paymentIntentResponse && paymentIntentResponse.ok) {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è: –£–°–ü–ï–®–ù–û');
    } else {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è: –û–®–ò–ë–ö–ê –∏–ª–∏ –ù–ï –í–´–ü–û–õ–ù–Ø–õ–û–°–¨');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    printDivider('–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú');
    
    let problemsFound = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤
    if (taxCalculationResponse && taxCalculationResponse.ok) {
      if (!taxCalculationResponse.data.hasOwnProperty('taxAmount')) {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞: API —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ taxAmount');
        problemsFound = true;
      }
      
      if (!taxCalculationResponse.data.hasOwnProperty('totalAmount')) {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞: API —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ totalAmount');
        problemsFound = true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if (paymentIntentResponse && paymentIntentResponse.ok) {
      if (!paymentIntentResponse.data.hasOwnProperty('clientSecret')) {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞: API —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç clientSecret');
        problemsFound = true;
      }
    }
    
    if (!problemsFound) {
      console.log('‚úÖ –Ø–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ API –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      console.log('üí° –ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('  - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã API –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞');
      console.log('  - –ï—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
      console.log('  - –ü—Ä–æ—Ö–æ–¥—è—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å—ã CORS-–ø–æ–ª–∏—Ç–∏–∫—É (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤)');
    }
    
  } catch (error) {
    console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(console.error);