/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å:
 * 1. –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ª–æ–≥–∞—Ö –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Stripe
 * 2. –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Stripe
 * 3. –ö–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node tax-debug.js login username password
 * node tax-debug.js change-country DE
 * node tax-debug.js test-payment 1
 */

const fetch = require('node-fetch');
const fs = require('fs');

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ cookie
const COOKIE_FILE = 'tax-debug-cookie.txt';

function saveCookie(cookie) {
  fs.writeFileSync(COOKIE_FILE, cookie);
  console.log(`‚úÖ Cookie —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${COOKIE_FILE}`);
}

function loadCookie() {
  try {
    return fs.readFileSync(COOKIE_FILE, 'utf8');
  } catch (e) {
    console.log(`‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å cookie –∏–∑ ${COOKIE_FILE}. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É login.`);
    process.exit(1);
  }
}

async function fetchWithCookie(url, options = {}) {
  const cookie = loadCookie();
  
  const defaultOptions = {
    headers: {
      'Cookie': cookie,
      'Content-Type': 'application/json'
    }
  };
  
  const mergedOptions = {
    ...defaultOptions,
    ...options,
    headers: {
      ...defaultOptions.headers,
      ...(options.headers || {})
    }
  };
  
  const response = await fetch(url, mergedOptions);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const setCookie = response.headers.get('set-cookie');
  if (setCookie) {
    saveCookie(setCookie);
  }
  
  return response;
}

// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
async function login(username, password) {
  console.log(`üîí –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ª–æ–≥–∏–Ω–æ–º: ${username}`);
  
  const response = await fetch('http://localhost:5000/api/users/login', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ username, password })
  });
  
  const setCookie = response.headers.get('set-cookie');
  if (setCookie) {
    saveCookie(setCookie);
  }
  
  const result = await response.json();
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:', result);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await getCurrentUser();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getCurrentUser() {
  console.log('üßë –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  const response = await fetchWithCookie('http://localhost:5000/api/users/me');
  const user = await response.json();
  
  if (user.error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.error);
    return null;
  }
  
  console.log('‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
    id: user.id,
    username: user.username,
    country: user.country || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
    currency: shouldUseEUR(user.country) ? 'EUR' : 'USD',
    email: user.email
  });
  
  return user;
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function changeCountry(userId, country) {
  console.log(`üåç –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞: ${country}`);
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await getCurrentUser();
  if (!user) {
    console.log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const response = await fetchWithCookie(`http://localhost:5000/api/users/${user.id}`, {
    method: 'PUT',
    body: JSON.stringify({ country })
  });
  
  const result = await response.json();
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã:', result);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  await getCurrentUser();
  
  // –í—ã–≤–æ–¥–∏–º –æ–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–ª–æ–≥–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
  printTaxForCountry(country);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
function printTaxForCountry(country) {
  const currency = shouldUseEUR(country) ? 'EUR' : 'USD';
  let taxInfo = '0%';
  let taxDescription = '–ë–µ–∑ –Ω–∞–ª–æ–≥–∞';
  
  if (isEUCountry(country)) {
    taxInfo = '19%';
    taxDescription = '–ù–î–° (VAT)';
    if (country === 'FR') taxInfo = '20%';
    else if (country === 'IE') taxInfo = '23%';
    // –∏ —Ç.–¥. –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω –ï–°
  } else if (country === 'US') {
    taxInfo = '0%';
    taxDescription = 'No Sales Tax (–¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞)';
  }
  
  console.log('\nüìä –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:');
  console.log(`–°—Ç—Ä–∞–Ω–∞: ${country}`);
  console.log(`–í–∞–ª—é—Ç–∞: ${currency}`);
  console.log(`–ù–∞–ª–æ–≥: ${taxInfo} (${taxDescription})`);
}

// –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
async function testPayment(productId) {
  console.log(`üí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID: ${productId}`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await getCurrentUser();
  if (!user) {
    console.log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  const productResponse = await fetchWithCookie(`http://localhost:5000/api/products/${productId}`);
  const product = await productResponse.json();
  
  if (product.error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID ${productId}:`, product.error);
    return;
  }
  
  console.log('üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ:', {
    id: product.id,
    name: product.name,
    price: product.price,
    currency: product.currency,
    stripeId: product.stripeId || '–ù–µ—Ç'
  });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã
  const currency = shouldUseEUR(user.country) ? 'eur' : 'usd';
  let price = product.price;
  
  // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ü–µ–Ω–∞ –≤ EUR –∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å euroPrice
  if (currency === 'eur' && product.euroPrice) {
    price = product.euroPrice;
    console.log(`‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º EUR —Ü–µ–Ω—É: ${price}`);
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
  console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ (PaymentIntent) –¥–ª—è ${price} ${currency}...`);
  
  const paymentResponse = await fetchWithCookie('http://localhost:5000/api/create-payment-intent', {
    method: 'POST',
    body: JSON.stringify({
      productId: product.id,
      currency
    })
  });
  
  const paymentData = await paymentResponse.json();
  
  if (paymentData.error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', paymentData.error);
    return;
  }
  
  console.log('‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', {
    clientSecret: paymentData.clientSecret ? paymentData.clientSecret.substring(0, 15) + '...' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    orderId: paymentData.orderId
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
  if (paymentData.orderId) {
    const orderResponse = await fetchWithCookie(`http://localhost:5000/api/users/${user.id}/orders`);
    const orders = await orderResponse.json();
    
    const order = orders.find(o => o.id === paymentData.orderId);
    if (order) {
      console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:', {
        id: order.id,
        productId: order.productId,
        status: order.status,
        amount: order.amount,
        currency: order.currency,
        stripePaymentId: order.stripePaymentId ? order.stripePaymentId.substring(0, 15) + '...' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      });
    }
  }
  
  console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
  console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (http://localhost:5000/checkout)');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  console.log('3. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ä–∞–∑–¥–µ–ª–µ Network, –Ω–∞–π–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ /api/create-payment-intent');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function shouldUseEUR(country) {
  if (!country) return false;
  return isEUCountry(country);
}

function isEUCountry(country) {
  const euCountries = [
    'AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR',
    'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL',
    'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE'
  ];
  return euCountries.includes(country);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  if (!command) {
    console.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    console.log('login <username> <password> - –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
    console.log('change-country <country> - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('test-payment <productId> - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É');
    return;
  }
  
  try {
    switch (command) {
      case 'login':
        if (args.length < 3) {
          console.log('‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å');
          return;
        }
        await login(args[1], args[2]);
        break;
        
      case 'change-country':
        if (args.length < 2) {
          console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã');
          return;
        }
        await changeCountry(null, args[1]);
        break;
        
      case 'test-payment':
        if (args.length < 2) {
          console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å ID –ø—Ä–æ–¥—É–∫—Ç–∞');
          return;
        }
        await testPayment(parseInt(args[1]));
        break;
        
      default:
        console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
  }
}

main().then(() => console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'));