/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ PWA
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
 * —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ Progressive Web App.
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.PWAOfflineTest = {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
  isOnline: navigator.onLine,
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ Service Worker
  serviceWorkerStatus: {
    supported: 'serviceWorker' in navigator,
    registered: false,
    active: false,
    version: null
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
  cacheInfo: {
    caches: [],
    totalSize: 0,
    entryCount: 0
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
  resourceStats: {
    html: { count: 0, size: 0 },
    css: { count: 0, size: 0 },
    js: { count: 0, size: 0 },
    images: { count: 0, size: 0 },
    fonts: { count: 0, size: 0 },
    other: { count: 0, size: 0 }
  },
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   */
  init() {
    console.log('üîç Initializing PWA Offline Test Tool');
    this.setupEventListeners();
    this.checkServiceWorker();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    this.updateNetworkStatusUI();
    
    return this;
  },
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    window.addEventListener('online', () => {
      this.isOnline = true;
      this.updateNetworkStatusUI();
      console.log('‚úÖ Network connection restored');
    });
    
    window.addEventListener('offline', () => {
      this.isOnline = false;
      this.updateNetworkStatusUI();
      console.log('‚ùå Network connection lost');
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.addEventListener('DOMContentLoaded', () => {
      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
      const checkCacheBtn = document.getElementById('check-cache-btn');
      if (checkCacheBtn) {
        checkCacheBtn.addEventListener('click', () => this.analyzeCaches());
      }
      
      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
      const clearCacheBtn = document.getElementById('clear-cache-btn');
      if (clearCacheBtn) {
        clearCacheBtn.addEventListener('click', () => this.clearAllCaches());
      }
      
      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const refreshBtn = document.getElementById('refresh-btn');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', () => window.location.reload());
      }
      
      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ñ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const viewOfflineBtn = document.getElementById('view-offline-btn');
      if (viewOfflineBtn) {
        viewOfflineBtn.addEventListener('click', () => window.open('/offline.html', '_blank'));
      }
      
      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å –≤–æ—Ä–∫–µ—Ä–∞
      const updateSWBtn = document.getElementById('update-sw-btn');
      if (updateSWBtn) {
        updateSWBtn.addEventListener('click', () => this.updateServiceWorker());
      }
    });
  },
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
   */
  updateNetworkStatusUI() {
    const statusElement = document.getElementById('network-status');
    const statusIconElement = document.getElementById('network-status-icon');
    
    if (statusElement) {
      statusElement.textContent = this.isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω';
      statusElement.className = this.isOnline ? 'status-online' : 'status-offline';
    }
    
    if (statusIconElement) {
      statusIconElement.className = this.isOnline ? 'status-icon-online' : 'status-icon-offline';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.title = `${this.isOnline ? 'üü¢' : 'üî¥'} PWA –¢–µ—Å—Ç | AI Store`;
  },
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Service Worker
   */
  async checkServiceWorker() {
    if (!('serviceWorker' in navigator)) {
      console.error('‚ùå Service Worker is not supported in this browser');
      this.serviceWorkerStatus.supported = false;
      this.updateServiceWorkerUI();
      return;
    }
    
    try {
      const registrations = await navigator.serviceWorker.getRegistrations();
      
      if (registrations.length === 0) {
        console.warn('‚ö†Ô∏è No Service Worker registrations found');
        this.serviceWorkerStatus.registered = false;
      } else {
        this.serviceWorkerStatus.registered = true;
        const mainRegistration = registrations[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä
        this.serviceWorkerStatus.active = !!mainRegistration.active;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é
        if (mainRegistration.active) {
          // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
          this.serviceWorkerStatus.version = 'Unknown';
        }
        
        console.log('‚úÖ Service Worker is registered and active');
      }
    } catch (error) {
      console.error('‚ùå Error checking Service Worker:', error);
    }
    
    this.updateServiceWorkerUI();
  },
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Service Worker
   */
  updateServiceWorkerUI() {
    const swStatusElement = document.getElementById('sw-status');
    const swVersionElement = document.getElementById('sw-version');
    
    if (swStatusElement) {
      if (!this.serviceWorkerStatus.supported) {
        swStatusElement.textContent = '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
        swStatusElement.className = 'status-error';
      } else if (!this.serviceWorkerStatus.registered) {
        swStatusElement.textContent = '–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω';
        swStatusElement.className = 'status-warning';
      } else if (!this.serviceWorkerStatus.active) {
        swStatusElement.textContent = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω';
        swStatusElement.className = 'status-warning';
      } else {
        swStatusElement.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
        swStatusElement.className = 'status-success';
      }
    }
    
    if (swVersionElement && this.serviceWorkerStatus.version) {
      swVersionElement.textContent = this.serviceWorkerStatus.version;
    }
  },
  
  /**
   * –ê–Ω–∞–ª–∏–∑ –∫—ç—à–µ–π –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   */
  async analyzeCaches() {
    if (!('caches' in window)) {
      console.error('‚ùå Cache API is not supported in this browser');
      return;
    }
    
    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      this.cacheInfo = {
        caches: [],
        totalSize: 0,
        entryCount: 0
      };
      
      this.resourceStats = {
        html: { count: 0, size: 0 },
        css: { count: 0, size: 0 },
        js: { count: 0, size: 0 },
        images: { count: 0, size: 0 },
        fonts: { count: 0, size: 0 },
        other: { count: 0, size: 0 }
      };
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—ç—à–µ–π
      const cacheNames = await caches.keys();
      
      if (cacheNames.length === 0) {
        console.warn('‚ö†Ô∏è No caches found');
        this.updateCacheUI();
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫—ç—à
      for (const cacheName of cacheNames) {
        const cache = await caches.open(cacheName);
        const requests = await cache.keys();
        let cacheSize = 0;
        let entries = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤ –∫—ç—à–µ
        for (const request of requests) {
          const response = await cache.match(request);
          if (!response) continue;
          
          const blob = await response.clone().blob();
          const size = blob.size;
          cacheSize += size;
          
          // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å
          const url = request.url;
          const type = this.getResourceType(url);
          this.resourceStats[type].count++;
          this.resourceStats[type].size += size;
          
          entries.push({
            url,
            size,
            type,
            timestamp: response.headers.get('sw-cache-timestamp') || 'unknown'
          });
        }
        
        this.cacheInfo.caches.push({
          name: cacheName,
          size: cacheSize,
          entryCount: requests.length,
          entries
        });
        
        this.cacheInfo.totalSize += cacheSize;
        this.cacheInfo.entryCount += requests.length;
      }
      
      console.log('üìä Cache analysis completed:', this.cacheInfo);
      this.updateCacheUI();
      
    } catch (error) {
      console.error('‚ùå Error analyzing caches:', error);
    }
  },
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
   */
  updateCacheUI() {
    const cacheListElement = document.getElementById('cache-list');
    const cacheSizeElement = document.getElementById('cache-size');
    const cacheCountElement = document.getElementById('cache-count');
    
    if (cacheSizeElement) {
      cacheSizeElement.textContent = this.formatSize(this.cacheInfo.totalSize);
    }
    
    if (cacheCountElement) {
      cacheCountElement.textContent = this.cacheInfo.entryCount.toString();
    }
    
    if (cacheListElement) {
      // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
      cacheListElement.innerHTML = '';
      
      if (this.cacheInfo.caches.length === 0) {
        const emptyItem = document.createElement('li');
        emptyItem.className = 'cache-empty';
        emptyItem.textContent = '–ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
        cacheListElement.appendChild(emptyItem);
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∫—ç—à–µ
      for (const cache of this.cacheInfo.caches) {
        const cacheItem = document.createElement('li');
        cacheItem.className = 'cache-item';
        
        const cacheName = document.createElement('div');
        cacheName.className = 'cache-name';
        cacheName.textContent = cache.name;
        
        const cacheDetails = document.createElement('div');
        cacheDetails.className = 'cache-details';
        cacheDetails.textContent = `${this.formatSize(cache.size)} ‚Ä¢ ${cache.entryCount} —Ñ–∞–π–ª–æ–≤`;
        
        cacheItem.appendChild(cacheName);
        cacheItem.appendChild(cacheDetails);
        cacheListElement.appendChild(cacheItem);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ä–µ—Å—É—Ä—Å–æ–≤
      this.updateResourceStatsUI();
    }
  },
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  updateResourceStatsUI() {
    const resourceStatsElement = document.getElementById('resource-stats');
    
    if (resourceStatsElement) {
      // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      resourceStatsElement.innerHTML = '';
      
      const types = [
        { id: 'html', label: 'HTML' },
        { id: 'css', label: 'CSS' },
        { id: 'js', label: 'JavaScript' },
        { id: 'images', label: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' },
        { id: 'fonts', label: '–®—Ä–∏—Ñ—Ç—ã' },
        { id: 'other', label: '–ü—Ä–æ—á–µ–µ' }
      ];
      
      for (const type of types) {
        const stat = this.resourceStats[type.id];
        if (stat.count === 0) continue;
        
        const statItem = document.createElement('div');
        statItem.className = 'stat-item';
        
        const statLabel = document.createElement('span');
        statLabel.className = 'stat-label';
        statLabel.textContent = type.label;
        
        const statValue = document.createElement('span');
        statValue.className = 'stat-value';
        statValue.textContent = `${stat.count} (${this.formatSize(stat.size)})`;
        
        statItem.appendChild(statLabel);
        statItem.appendChild(statValue);
        resourceStatsElement.appendChild(statItem);
      }
    }
  },
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
   */
  async clearAllCaches() {
    if (!('caches' in window)) {
      console.error('‚ùå Cache API is not supported in this browser');
      return;
    }
    
    try {
      const cacheNames = await caches.keys();
      
      if (cacheNames.length === 0) {
        console.warn('‚ö†Ô∏è No caches to clear');
        return;
      }
      
      // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫—ç—à
      for (const cacheName of cacheNames) {
        await caches.delete(cacheName);
        console.log(`üóëÔ∏è Cache "${cacheName}" deleted`);
      }
      
      console.log('‚úÖ All caches cleared');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
      await this.analyzeCaches();
      
      // –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      alert('–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå Error clearing caches:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: ' + error.message);
    }
  },
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker
   */
  async updateServiceWorker() {
    if (!('serviceWorker' in navigator)) {
      console.error('‚ùå Service Worker is not supported in this browser');
      return;
    }
    
    try {
      const registrations = await navigator.serviceWorker.getRegistrations();
      
      if (registrations.length === 0) {
        console.warn('‚ö†Ô∏è No Service Worker registrations to update');
        return;
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–∂–¥—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      for (const registration of registrations) {
        const updatedRegistration = await registration.update();
        console.log('üîÑ Service Worker updated:', updatedRegistration);
      }
      
      console.log('‚úÖ Service Worker update check completed');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
      await this.checkServiceWorker();
      
      // –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      alert('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Service Worker –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
      
    } catch (error) {
      console.error('‚ùå Error updating Service Worker:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Service Worker: ' + error.message);
    }
  },
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ URL
   */
  getResourceType(url) {
    const extension = url.split('.').pop().toLowerCase();
    
    switch (extension) {
      case 'html':
      case 'htm':
        return 'html';
      case 'css':
        return 'css';
      case 'js':
        return 'js';
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'gif':
      case 'svg':
      case 'webp':
      case 'ico':
        return 'images';
      case 'woff':
      case 'woff2':
      case 'ttf':
      case 'eot':
      case 'otf':
        return 'fonts';
      default:
        return 'other';
    }
  },
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  formatSize(bytes) {
    if (bytes === 0) return '0 B';
    
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    
    return `${parseFloat((bytes / Math.pow(1024, i)).toFixed(2))} ${sizes[i]}`;
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
  window.PWAOfflineTest.init();
  
  console.log('‚úÖ PWA Offline Test Tool initialized');
});