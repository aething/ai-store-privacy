import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";
import { 
  clearUserCache, 
  clearAllCache, 
  reloadPage, 
  clearCacheAndReload,
  clearServiceWorkerCache,
  checkOfflineSupport,
  isOffline,
  resetAppStorage,
  updateServiceWorker,
  cacheUtils
} from "./utils/clearCache";
import { registerServiceWorker, sendMessageToServiceWorker } from './registerServiceWorker';

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–∏–ø–∞ window –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
declare global {
  interface Window {
    appDebug: {
      // –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏
      clearUserCache: (preserveCountry?: boolean) => void;
      clearAllCache: () => void;
      reloadPage: () => void;
      clearCacheAndReload: (preserveCountry?: boolean) => void;
      
      // PWA –∏ Service Worker —Ñ—É–Ω–∫—Ü–∏–∏
      clearServiceWorkerCache: () => Promise<boolean>;
      refreshServiceWorkerCache: () => Promise<boolean>;
      checkOfflineSupport: () => Promise<boolean>;
      isOffline: () => boolean;
      resetAppCache: (preserveUserData?: boolean) => Promise<boolean>;
      
      // –î–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º API Service Worker
      swAPI: {
        getVersion: () => Promise<string>;
        getCacheInfo: () => Promise<any>;
        cacheUrls: (urls: string[]) => Promise<any>;
        checkResource: (url: string) => Promise<boolean>;
      }
    };
    
    // Legacy API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    AIStoreMaintenance?: {
      clearCache?: () => Promise<boolean>;
      registerSW?: () => Promise<boolean>;
      updateSW?: () => Promise<boolean>;
      refresh?: () => Promise<boolean>;
      getVersion?: () => Promise<string>;
      getCacheInfo?: () => Promise<any>;
      cacheUrls?: (urls: string[]) => Promise<any>;
      checkResource?: (url: string) => Promise<boolean>;
    };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PWA
if (typeof window !== 'undefined') {
  window.appDebug = {
    // –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏
    clearUserCache: (preserveCountry = false) => clearUserCache(preserveCountry),
    clearAllCache,
    reloadPage,
    clearCacheAndReload: (preserveCountry = false) => clearCacheAndReload(preserveCountry),
    
    // PWA –∏ Service Worker —Ñ—É–Ω–∫—Ü–∏–∏
    clearServiceWorkerCache,
    refreshServiceWorkerCache: clearServiceWorkerCache, // –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞–ª–∏–∞—Å
    checkOfflineSupport,
    isOffline,
    resetAppCache: resetAppStorage,
    
    // –î–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º API Service Worker
    swAPI: {
      getVersion: async () => {
        if (navigator.serviceWorker && navigator.serviceWorker.controller) {
          try {
            const result = await sendMessageToServiceWorker({
              type: 'GET_VERSION'
            });
            return result?.payload?.version || 'unknown';
          } catch (error) {
            console.error('Error getting service worker version:', error);
            return 'unknown';
          }
        }
        
        // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (window.AIStoreMaintenance && window.AIStoreMaintenance.getVersion) {
          return window.AIStoreMaintenance.getVersion();
        }
        
        return 'unknown';
      },
      getCacheInfo: async () => {
        if (navigator.serviceWorker && navigator.serviceWorker.controller) {
          try {
            const result = await sendMessageToServiceWorker({
              type: 'GET_CACHE_INFO'
            });
            return result?.payload || { items: 0, size: 0 };
          } catch (error) {
            console.error('Error getting cache info:', error);
            return { items: 0, size: 0 };
          }
        }
        
        // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (window.AIStoreMaintenance && window.AIStoreMaintenance.getCacheInfo) {
          return window.AIStoreMaintenance.getCacheInfo();
        }
        
        return { items: 0, size: 0 };
      },
      cacheUrls: async (urls: string[]) => {
        if (navigator.serviceWorker && navigator.serviceWorker.controller) {
          try {
            const result = await sendMessageToServiceWorker({
              type: 'CACHE_URLS',
              payload: { urls }
            });
            return result?.payload || { success: 0, failed: 0 };
          } catch (error) {
            console.error('Error caching urls:', error);
            return { success: 0, failed: 0 };
          }
        }
        
        // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (window.AIStoreMaintenance && window.AIStoreMaintenance.cacheUrls) {
          return window.AIStoreMaintenance.cacheUrls(urls);
        }
        
        return { success: 0, failed: 0 };
      },
      checkResource: async (url: string) => {
        if (navigator.serviceWorker && navigator.serviceWorker.controller) {
          try {
            const result = await sendMessageToServiceWorker({
              type: 'CHECK_RESOURCE',
              payload: { url }
            });
            return result?.payload?.cached || false;
          } catch (error) {
            console.error('Error checking resource:', error);
            return false;
          }
        }
        
        // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (window.AIStoreMaintenance && window.AIStoreMaintenance.checkResource) {
          return window.AIStoreMaintenance.checkResource(url);
        }
        
        return false;
      }
    }
  };
  
  console.log("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ window.appDebug");
  console.log("üìã –ü—Ä–∏–º–µ—Ä—ã:");
  console.log(" - window.appDebug.clearUserCache()");
  console.log(" - window.appDebug.checkOfflineSupport()");
  console.log(" - window.appDebug.swAPI.getCacheInfo()");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
createRoot(document.getElementById("root")!).render(<App />);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker –¥–ª—è PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Service Worker...");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registerWithRetry = async (maxRetries = 3, delay = 1000) => {
  let retries = 0;
  
  while (retries < maxRetries) {
    try {
      const success = await registerServiceWorker({
        scriptPath: '/service-worker.js',
        reloadOnUpdate: false, // –ù–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        debug: true // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      });
      
      if (success) {
        console.log(`‚úÖ Service Worker —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${retries + 1})`);
        return true;
      } else {
        console.warn(`‚ö†Ô∏è Service Worker –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å (–ø–æ–ø—ã—Ç–∫–∞ ${retries + 1})`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker (–ø–æ–ø—ã—Ç–∫–∞ ${retries + 1}):`, error);
    }
    
    retries++;
    
    if (retries < maxRetries) {
      console.log(`‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker (${delay}ms)...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  return false;
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
registerWithRetry().then(success => {
  if (!success) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Service Worker –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫");
  }
});
