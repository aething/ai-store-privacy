/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
 * —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ —Å—Ç—Ä–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º.
 */

const { spawn } = require('child_process');

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é curl
 * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
 */
async function fetchWithCurl(url, options = {}) {
  return new Promise((resolve, reject) => {
    const args = ['-s'];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥
    if (options.method) {
      args.push('-X', options.method);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (options.headers) {
      Object.entries(options.headers).forEach(([key, value]) => {
        args.push('-H', `${key}: ${value}`);
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    if (options.body) {
      args.push('-d', options.body);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º URL
    args.push(url);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É curl
    const curl = spawn('curl', args);
    
    let responseData = '';
    let errorData = '';
    
    curl.stdout.on('data', (data) => {
      responseData += data.toString();
    });
    
    curl.stderr.on('data', (data) => {
      errorData += data.toString();
    });
    
    curl.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`curl exited with code ${code}: ${errorData}`));
        return;
      }
      
      try {
        // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
        const data = JSON.parse(responseData);
        resolve({
          ok: true,
          status: 200,
          statusText: 'OK',
          json: () => Promise.resolve(data),
          data // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        });
      } catch (error) {
        reject(new Error(`Failed to parse JSON response: ${error.message}\nResponse: ${responseData}`));
      }
    });
  });
}

// URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const API_URL = 'http://localhost:5000/api/create-payment-intent';

// –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞–ª–æ–≥–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
const EXPECTED_TAX_RATES = {
  'DE': 0.19, // –ì–µ—Ä–º–∞–Ω–∏—è - 19% MwSt
  'FR': 0.20, // –§—Ä–∞–Ω—Ü–∏—è - 20% TVA
  'IT': 0.22, // –ò—Ç–∞–ª–∏—è - 22% IVA
  'ES': 0.21, // –ò—Å–ø–∞–Ω–∏—è - 21% IVA
  'AT': 0.20, // –ê–≤—Å—Ç—Ä–∏—è - 20% MwSt
  'BE': 0.21, // –ë–µ–ª—å–≥–∏—è - 21% BTW
  'GB': 0.20, // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è - 20% VAT
  'US': 0.00, // –°–®–ê - 0% (–Ω–µ—Ç —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞ —Å –ø—Ä–æ–¥–∞–∂)
  'unknown': 0.00 // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ - 0%
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const BASE_TEST_DATA = {
  amount: 10000,
  userId: 1,
  productId: 1,
  currency: 'eur',
  force_country: true
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –∫–∞–∫ –≤–∞–ª—é—Ç—ã
function formatCurrency(amount, currency = 'eur') {
  const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency,
    minimumFractionDigits: 2
  });
  
  return formatter.format(amount / 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
async function testCountryTaxRate(country) {
  console.log(`\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–õ–û–ì–û–í–û–ô –°–¢–ê–í–ö–ò –î–õ–Ø: ${country} ===`);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
  const testData = {
    ...BASE_TEST_DATA,
    country
  };
  
  console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(testData, null, 2)}`);
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetchWithCurl(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });
    
    const data = response.data;
    
    console.log(`\n–û—Ç–≤–µ—Ç API: ${response.status} ${response.statusText}`);
    
    if (!response.ok) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${data.message || JSON.stringify(data)}`);
      return false;
    }
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω PaymentIntent`);
    console.log(`‚úÖ Client Secret: ${data.clientSecret.substring(0, 20)}...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (!data.tax) {
      console.log(`‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ`);
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
    const expectedRate = EXPECTED_TAX_RATES[country] || 0;
    
    // –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—É–º–º—ã –Ω–∞–ª–æ–≥–∞
    const expectedTaxAmount = Math.round(BASE_TEST_DATA.amount * expectedRate);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
    const actualRate = data.tax.rate;
    const actualTaxAmount = data.tax.amount;
    
    console.log(`\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–µ:`);
    console.log(`   –°—Ç–∞–≤–∫–∞: ${actualRate * 100}% (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedRate * 100}%)`);
    console.log(`   –ú–µ—Ç–∫–∞: ${data.tax.label}`);
    console.log(`   –°—É–º–º–∞: ${formatCurrency(actualTaxAmount)} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${formatCurrency(expectedTaxAmount)})`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    const isRateCorrect = Math.abs(actualRate - expectedRate) < 0.001; // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
    const isTaxAmountCorrect = Math.abs(actualTaxAmount - expectedTaxAmount) <= 1; // –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    
    if (!isRateCorrect) {
      console.log(`‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è ${country}`);
      console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedRate * 100}%`);
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${actualRate * 100}%`);
    }
    
    if (!isTaxAmountCorrect) {
      console.log(`‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –Ω–∞–ª–æ–≥–∞ –¥–ª—è ${country}`);
      console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${formatCurrency(expectedTaxAmount)}`);
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${formatCurrency(actualTaxAmount)}`);
    }
    
    if (isRateCorrect && isTaxAmountCorrect) {
      console.log(`\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê: –ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏ —Å—É–º–º–∞ –¥–ª—è ${country} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º`);
      return true;
    } else {
      console.log(`\n‚ùå –ü–†–û–í–ï–†–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê: –ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å—É–º–º–∞ –¥–ª—è ${country} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
async function testAllCountries() {
  console.log("=".repeat(80));
  console.log("–ü–†–û–í–ï–†–ö–ê –ù–ê–õ–û–ì–û–í–´–• –°–¢–ê–í–û–ö –î–õ–Ø –†–ê–ó–ù–´–• –°–¢–†–ê–ù");
  console.log("=".repeat(80));
  
  const countries = Object.keys(EXPECTED_TAX_RATES);
  let passed = 0;
  let failed = 0;
  
  for (const country of countries) {
    const result = await testCountryTaxRate(country);
    if (result) passed++;
    else failed++;
  }
  
  console.log("\n=".repeat(80));
  console.log(`–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}`);
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${failed}`);
  console.log(`üîÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω: ${countries.length}`);
  console.log("=".repeat(80));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testAllCountries().catch(error => {
  console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});