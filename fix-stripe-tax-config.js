/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ª–æ–≥–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö Stripe
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç:
 * 1. tax_behavior –≤—Å–µ—Ö —Ü–µ–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * 2. –î–æ–±–∞–≤–ª—è–µ—Ç tax_code –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node fix-stripe-tax-config.js
 */

const fetch = require('node-fetch');
require('dotenv').config();

// –ó–∞–≥—Ä—É–∂–∞–µ–º Stripe API Key
const STRIPE_API_KEY = process.env.STRIPE_SECRET_KEY;
if (!STRIPE_API_KEY) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç STRIPE_SECRET_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è Stripe
async function getStripe() {
  try {
    const Stripe = (await import('stripe')).default;
    return new Stripe(STRIPE_API_KEY, {
      apiVersion: '2025-02-24.acacia',
      telemetry: false
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Stripe:', error);
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
async function updateProduct(productId) {
  console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞: ${productId}`);
  
  const stripe = await getStripe();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    const product = await stripe.products.retrieve(productId);
    console.log(`  –ü—Ä–æ–¥—É–∫—Ç: ${product.name}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tax_code, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    // txcd_30060001 - "Electronically Supplied Services"
    let updated = false;
    const updateData = {};
    
    if (!product.tax_code) {
      updateData.tax_code = 'txcd_30060001'; // –ö–æ–¥ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö/—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥
      updated = true;
    }
    
    if (updated) {
      const updatedProduct = await stripe.products.update(productId, updateData);
      console.log(`  ‚úÖ –ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å tax_code: ${updatedProduct.tax_code}`);
    } else {
      console.log(`  ‚ÑπÔ∏è –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ –∏–º–µ–µ—Ç tax_code: ${product.tax_code || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
    const prices = await stripe.prices.list({
      product: productId,
      active: true,
      limit: 100,
    });
    
    console.log(`  –ù–∞–π–¥–µ–Ω–æ ${prices.data.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º tax_behavior –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–Ω—ã
    for (const price of prices.data) {
      if (price.tax_behavior !== 'exclusive') {
        console.log(`  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã ${price.id}: ${price.unit_amount/100} ${price.currency}`);
        
        try {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É, —Ç.–∫. tax_behavior –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
          const newPrice = await stripe.prices.create({
            product: productId,
            unit_amount: price.unit_amount,
            currency: price.currency,
            tax_behavior: 'exclusive', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º exclusive –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤
            lookup_key: `migrated_from_${price.id}`,
            transfer_lookup_key: true,
            metadata: {
              original_price_id: price.id,
              migrated_at: new Date().toISOString(),
              ...price.metadata
            }
          });
          
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice.id} —Å tax_behavior: ${newPrice.tax_behavior}`);
          
          // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É
          await stripe.prices.update(price.id, { active: false });
          console.log(`  ‚úÖ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ ${price.id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
        } catch (priceError) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã ${price.id}:`, priceError);
        }
      } else {
        console.log(`  ‚úì –¶–µ–Ω–∞ ${price.id} —É–∂–µ –∏–º–µ–µ—Ç tax_behavior: ${price.tax_behavior}`);
      }
    }
    
    return { product, updated, prices: prices.data };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}:`, error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
async function updateAllProducts() {
  console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
  
  const stripe = await getStripe();
  
  try {
    const products = await stripe.products.list({
      active: true,
      limit: 100,
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${products.data.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    
    for (const product of products.data) {
      await updateProduct(product.id);
    }
    
    return products.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Stripe Tax
async function checkStripeTaxSettings() {
  console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Stripe Tax');
  
  const stripe = await getStripe();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Stripe Tax
    const taxSettings = await stripe.tax.settings.retrieve();
    
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Stripe Tax:');
    console.log(`  –°—Ç–∞—Ç—É—Å: ${taxSettings.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    console.log(`  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç: ${taxSettings.defaults?.tax_code || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
    
    return taxSettings;
  } catch (error) {
    if (error.code === 'resource_missing') {
      console.log('‚ùå Stripe Tax –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Stripe Tax:', error);
    }
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîß –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Stripe Tax\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Stripe Tax
  await checkStripeTaxSettings();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  await updateAllProducts();
  
  console.log('\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('\n‚ÑπÔ∏è –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ API-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ü–µ–Ω');
  console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Stripe Tax –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Stripe');
  console.log('3. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Checkout Session –≤–º–µ—Å—Ç–æ Payment Intent –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤');
}

main().catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error));