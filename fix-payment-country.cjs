/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å—Ç—Ä–∞–Ω—ã –≤ API —Å–æ–∑–¥–∞–Ω–∏—è PaymentIntent
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ PaymentIntent
 */

// –ò—Å–ø–æ–ª—å–∑—É–µ–º curl —á–µ—Ä–µ–∑ spawn –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
const { spawn } = require('child_process');

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é curl
 * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
 */
async function fetchWithCurl(url, options = {}) {
  return new Promise((resolve, reject) => {
    const args = ['-s'];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥
    if (options.method) {
      args.push('-X', options.method);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (options.headers) {
      Object.entries(options.headers).forEach(([key, value]) => {
        args.push('-H', `${key}: ${value}`);
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    if (options.body) {
      args.push('-d', options.body);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º URL
    args.push(url);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É curl
    const curl = spawn('curl', args);
    
    let responseData = '';
    let errorData = '';
    
    curl.stdout.on('data', (data) => {
      responseData += data.toString();
    });
    
    curl.stderr.on('data', (data) => {
      errorData += data.toString();
    });
    
    curl.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`curl exited with code ${code}: ${errorData}`));
        return;
      }
      
      try {
        // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
        const data = JSON.parse(responseData);
        resolve({
          ok: true,
          status: 200,
          statusText: 'OK',
          json: () => Promise.resolve(data),
          data // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        });
      } catch (error) {
        reject(new Error(`Failed to parse JSON response: ${error.message}\nResponse: ${responseData}`));
      }
    });
  });
}

// URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const API_URL = 'http://localhost:5000/api/create-payment-intent';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_DATA = {
  amount: 10000,
  userId: 1,
  productId: 1,
  currency: 'eur',
  country: 'FR',
  force_country: true
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω—ã
async function testPaymentIntentWithForcedCountry() {
  console.log("TEST 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å force_country=true –∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π");
  console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(TEST_DATA, null, 2)}`);
  
  try {
    const response = await fetchWithCurl(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(TEST_DATA)
    });
    
    const data = response.data;
    
    console.log(`\n–û—Ç–≤–µ—Ç API: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω PaymentIntent`);
      console.log(`‚úÖ Client Secret: ${data.clientSecret.substring(0, 20)}...`);
      
      if (data.tax) {
        console.log(`\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–µ:`);
        console.log(`   –°—Ç–∞–≤–∫–∞: ${data.tax.rate * 100}%`);
        console.log(`   –ú–µ—Ç–∫–∞: ${data.tax.label}`);
        console.log(`   –°—É–º–º–∞: ${data.tax.amount} EUR`);
      } else {
        console.log(`‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ`);
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${data.message || JSON.stringify(data)}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
async function testPaymentIntentWithoutForcedCountry() {
  console.log("\nTEST 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ force_country");
  
  const testData = {
    ...TEST_DATA
  };
  delete testData.force_country;
  
  console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(testData, null, 2)}`);
  
  try {
    const response = await fetchWithCurl(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });
    
    const data = response.data;
    
    console.log(`\n–û—Ç–≤–µ—Ç API: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω PaymentIntent`);
      console.log(`‚úÖ Client Secret: ${data.clientSecret.substring(0, 20)}...`);
      
      if (data.tax) {
        console.log(`\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–µ:`);
        console.log(`   –°—Ç–∞–≤–∫–∞: ${data.tax.rate * 100}%`);
        console.log(`   –ú–µ—Ç–∫–∞: ${data.tax.label}`);
        console.log(`   –°—É–º–º–∞: ${data.tax.amount} EUR`);
      } else {
        console.log(`‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ`);
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${data.message || JSON.stringify(data)}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å—Ç—Ä–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
async function testPaymentIntentWithCountryParam() {
  console.log("\nTEST 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å—Ç—Ä–∞–Ω—ã –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–µ");
  
  const testData = {
    amount: 10000,
    userId: 1,
    productId: 1,
    currency: 'eur'
  };
  
  console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(testData, null, 2)}`);
  
  try {
    const url = `${API_URL}?country=FR`;
    console.log(`URL: ${url}`);
    
    const response = await fetchWithCurl(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });
    
    const data = response.data;
    
    console.log(`\n–û—Ç–≤–µ—Ç API: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω PaymentIntent`);
      console.log(`‚úÖ Client Secret: ${data.clientSecret.substring(0, 20)}...`);
      
      if (data.tax) {
        console.log(`\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–µ:`);
        console.log(`   –°—Ç–∞–≤–∫–∞: ${data.tax.rate * 100}%`);
        console.log(`   –ú–µ—Ç–∫–∞: ${data.tax.label}`);
        console.log(`   –°—É–º–º–∞: ${data.tax.amount} EUR`);
      } else {
        console.log(`‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ`);
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${data.message || JSON.stringify(data)}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log("=".repeat(60));
  console.log("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –°–û–ó–î–ê–ù–ò–Ø PAYMENT INTENT –° –†–ê–ó–õ–ò–ß–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò –°–¢–†–ê–ù–´");
  console.log("=".repeat(60));
  
  await testPaymentIntentWithForcedCountry();
  await testPaymentIntentWithoutForcedCountry();
  await testPaymentIntentWithCountryParam();
  
  console.log("\n=".repeat(60));
  console.log("–ó–ê–í–ï–†–®–ï–ù–û");
  console.log("=".repeat(60));
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
  console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});