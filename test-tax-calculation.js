/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤
 * –≤ PaymentIntent —á–µ—Ä–µ–∑ Stripe API
 * 
 * –ó–∞–ø—É—Å–∫:
 * node test-tax-calculation.js
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import 'dotenv/config';
import Stripe from 'stripe';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Stripe API Key
const STRIPE_API_KEY = process.env.STRIPE_SECRET_KEY;
if (!STRIPE_API_KEY) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç STRIPE_SECRET_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stripe
const stripe = new Stripe(STRIPE_API_KEY, {
  apiVersion: '2025-02-24.acacia',
  telemetry: false
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ
function getTaxRate(country) {
  // –î–ª—è —Å—Ç—Ä–∞–Ω –ï–°
  const euRates = {
    'DE': 0.19, // –ì–µ—Ä–º–∞–Ω–∏—è
    'FR': 0.20, // –§—Ä–∞–Ω—Ü–∏—è
    'IT': 0.22, // –ò—Ç–∞–ª–∏—è
    'ES': 0.21, // –ò—Å–ø–∞–Ω–∏—è
  };
  
  return euRates[country] || 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PaymentIntent —Å –Ω–∞–ª–æ–≥–æ–º
async function createPaymentIntentWithTax(amount, currency, country) {
  console.log(`\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent —Å –Ω–∞–ª–æ–≥–æ–º:`);
  console.log(`–ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞: ${amount / 100} ${currency.toUpperCase()} (${amount} —Ü–µ–Ω—Ç–æ–≤)`);
  console.log(`–°—Ç—Ä–∞–Ω–∞: ${country}`);

  try {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥
    const taxRate = getTaxRate(country);
    const taxAmount = Math.round(amount * taxRate);
    const totalAmount = amount + taxAmount;
    
    console.log(`\n–†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–∞:`);
    console.log(`- –°—Ç–∞–≤–∫–∞ –ù–î–°: ${taxRate * 100}%`);
    console.log(`- –°—É–º–º–∞ –ù–î–°: ${taxAmount / 100} ${currency.toUpperCase()} (${taxAmount} —Ü–µ–Ω—Ç–æ–≤)`);
    console.log(`- –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${totalAmount / 100} ${currency.toUpperCase()} (${totalAmount} —Ü–µ–Ω—Ç–æ–≤)`);
    
    // –°–æ–∑–¥–∞–µ–º PaymentIntent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: totalAmount,
      currency: currency,
      payment_method_types: ['card'], // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
      metadata: {
        base_amount: amount.toString(),
        tax_amount: taxAmount.toString(),
        tax_rate: (taxRate * 100).toString() + '%',
        country: country,
      },
      description: `–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å –ù–î–° ${taxRate * 100}% (${taxAmount / 100} ${currency.toUpperCase()})`,
    });
    
    console.log(`\n‚úÖ PaymentIntent —Å–æ–∑–¥–∞–Ω: ${paymentIntent.id}`);
    console.log(`‚úÖ –û–±—â–∞—è —Å—É–º–º–∞: ${paymentIntent.amount / 100} ${paymentIntent.currency.toUpperCase()} (${paymentIntent.amount} —Ü–µ–Ω—Ç–æ–≤)`);
    console.log(`‚úÖ Client Secret: ${paymentIntent.client_secret}`);
    
    return paymentIntent;
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PaymentIntent:', error.message);
    if (error.type) {
      console.error(`–¢–∏–ø –æ—à–∏–±–∫–∏: ${error.type}`);
    }
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ PaymentIntent
async function getPaymentIntent(paymentIntentId) {
  console.log(`\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π PaymentIntent ${paymentIntentId}`);
  
  try {
    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);
    
    console.log(`\n‚úÖ PaymentIntent –ø–æ–ª—É—á–µ–Ω:`);
    console.log(`- ID: ${paymentIntent.id}`);
    console.log(`- –°—É–º–º–∞: ${paymentIntent.amount / 100} ${paymentIntent.currency.toUpperCase()} (${paymentIntent.amount} —Ü–µ–Ω—Ç–æ–≤)`);
    console.log(`- –°—Ç–∞—Ç—É—Å: ${paymentIntent.status}`);
    console.log(`- –û–ø–∏—Å–∞–Ω–∏–µ: ${paymentIntent.description}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if (paymentIntent.metadata) {
      console.log('\n–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:');
      for (const [key, value] of Object.entries(paymentIntent.metadata)) {
        console.log(`- ${key}: ${value}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –Ω–∞–ª–æ–≥–∞
      if (paymentIntent.metadata.base_amount && paymentIntent.metadata.tax_amount) {
        const baseAmount = parseInt(paymentIntent.metadata.base_amount);
        const taxAmount = parseInt(paymentIntent.metadata.tax_amount);
        const calculatedTotal = baseAmount + taxAmount;
        
        console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º:');
        console.log(`- –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞: ${baseAmount / 100} ${paymentIntent.currency.toUpperCase()} (${baseAmount} —Ü–µ–Ω—Ç–æ–≤)`);
        console.log(`- –°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: ${taxAmount / 100} ${paymentIntent.currency.toUpperCase()} (${taxAmount} —Ü–µ–Ω—Ç–æ–≤)`);
        console.log(`- –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∏—Ç–æ–≥: ${calculatedTotal / 100} ${paymentIntent.currency.toUpperCase()} (${calculatedTotal} —Ü–µ–Ω—Ç–æ–≤)`);
        console.log(`- –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—É–º–º–∞ –≤ Stripe: ${paymentIntent.amount / 100} ${paymentIntent.currency.toUpperCase()} (${paymentIntent.amount} —Ü–µ–Ω—Ç–æ–≤)`);
        
        if (calculatedTotal === paymentIntent.amount) {
          console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: —Å—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        } else {
          console.log('\n‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        }
      }
    }
    
    return paymentIntent;
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PaymentIntent:', error.message);
    return null;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Stripe API\n');
  
  // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent –¥–ª—è –ì–µ—Ä–º–∞–Ω–∏–∏ (—Å –ù–î–° 19%)
  console.log('\nüß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent –¥–ª—è –ì–µ—Ä–º–∞–Ω–∏–∏ (DE)');
  const germanPI = await createPaymentIntentWithTax(
    2760, // 27.60 EUR (–≤ —Ü–µ–Ω—Ç–∞—Ö)
    'eur',
    'DE'
  );
  
  if (germanPI) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π PaymentIntent
    await getPaymentIntent(germanPI.id);
  }
  
  // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent –¥–ª—è –§—Ä–∞–Ω—Ü–∏–∏ (—Å –ù–î–° 20%)
  console.log('\nüß™ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ PaymentIntent –¥–ª—è –§—Ä–∞–Ω—Ü–∏–∏ (FR)');
  const frenchPI = await createPaymentIntentWithTax(
    1500, // 15.00 EUR (–≤ —Ü–µ–Ω—Ç–∞—Ö)
    'eur',
    'FR'
  );
  
  console.log('\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

main().catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error));