/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Stripe Tax API
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
 * 1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ tax_behavior –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
 * 2. –†–∞–±–æ—Ç—É automatic_tax –≤ Checkout Session (–ø–æ—Å–∫–æ–ª—å–∫—É PaymentIntent –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç automatic_tax)
 * 3. –ü–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node stripe-tax-debug.js create-product "Product Name" price currency tax_behavior
 * node stripe-tax-debug.js create-checkout-session product_id
 * node stripe-tax-debug.js check-product product_id
 */

const fetch = require('node-fetch');
const fs = require('fs');
require('dotenv').config();

// –ó–∞–≥—Ä—É–∂–∞–µ–º Stripe API Key
const STRIPE_API_KEY = process.env.STRIPE_SECRET_KEY;
if (!STRIPE_API_KEY) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç STRIPE_SECRET_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è Stripe
async function getStripe() {
  try {
    const Stripe = (await import('stripe')).default;
    return new Stripe(STRIPE_API_KEY, {
      apiVersion: '2025-02-24.acacia',
      telemetry: false
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Stripe:', error);
    process.exit(1);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º tax_behavior
async function createProduct(name, price, currency = 'usd', tax_behavior = 'exclusive') {
  console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: "${name}" —Å —Ü–µ–Ω–æ–π ${price} ${currency} –∏ tax_behavior: ${tax_behavior}`);
  
  const stripe = await getStripe();
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    const product = await stripe.products.create({
      name,
      description: `Test product for tax debugging - ${name}`,
      metadata: {
        tax_behavior: tax_behavior,
        debug_created: 'true'
      }
    });
    
    console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: ${product.id}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º tax_behavior
    const priceObj = await stripe.prices.create({
      product: product.id,
      unit_amount: parseInt(price) * 100, // Stripe —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –≤–∞–ª—é—Ç—ã
      currency,
      tax_behavior, // exclusive - –Ω–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–≤–µ—Ä—Ö, inclusive - –Ω–∞–ª–æ–≥ –≤–∫–ª—é—á–µ–Ω –≤ —Ü–µ–Ω—É
      metadata: {
        debug_created: 'true'
      }
    });
    
    console.log(`‚úÖ –¶–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: ${priceObj.id} (${priceObj.unit_amount / 100} ${priceObj.currency})`);
    console.log(`‚úÖ Tax behavior: ${priceObj.tax_behavior}`);
    
    return { product, price: priceObj };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
async function checkProduct(productId) {
  console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: ${productId}`);
  
  const stripe = await getStripe();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    const product = await stripe.products.retrieve(productId);
    console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: ${product.id} - ${product.name}`);
    console.log(`–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, product.metadata);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
    const prices = await stripe.prices.list({
      product: productId,
      limit: 10,
    });
    
    console.log(`\n–ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω: ${prices.data.length}`);
    prices.data.forEach((price, index) => {
      console.log(`\n–¶–µ–Ω–∞ #${index + 1}:`);
      console.log(`ID: ${price.id}`);
      console.log(`–°—É–º–º–∞: ${price.unit_amount / 100} ${price.currency}`);
      console.log(`–ê–∫—Ç–∏–≤–Ω–∞: ${price.active}`);
      console.log(`Tax behavior: ${price.tax_behavior}`);
      console.log(`–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, price.metadata);
    });
    
    return { product, prices: prices.data };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ:', error);
    return null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ Checkout Session —Å automatic_tax
async function createCheckoutSession(priceId) {
  console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ Checkout Session –¥–ª—è —Ü–µ–Ω—ã: ${priceId}`);
  
  const stripe = await getStripe();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const customer = await stripe.customers.create({
      name: "Test Customer",
      email: "test@example.com",
      address: {
        line1: "1234 Main St",
        city: "Berlin",
        state: null,
        postal_code: "10115",
        country: "DE" // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∞–¥—Ä–µ—Å–æ–º –≤ –ì–µ—Ä–º–∞–Ω–∏–∏ (19% VAT)
      },
      metadata: {
        debug_created: 'true'
      }
    });
    
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${customer.id}`);
    
    // –°–æ–∑–¥–∞–µ–º Checkout Session —Å automatic_tax
    const session = await stripe.checkout.sessions.create({
      line_items: [
        {
          price: priceId,
          quantity: 1,
        },
      ],
      mode: 'payment',
      customer: customer.id,
      customer_update: {
        address: 'auto',
      },
      automatic_tax: { 
        enabled: true 
      }, // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤
      tax_id_collection: {
        enabled: true, // –ü–æ–∑–≤–æ–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –≤–≤–æ–¥–∏—Ç—å VAT ID (–¥–ª—è –±–∏–∑–Ω–µ—Å-–∫–ª–∏–µ–Ω—Ç–æ–≤)
      },
      success_url: 'https://example.com/success',
      cancel_url: 'https://example.com/cancel',
      metadata: {
        debug_created: 'true'
      }
    });
    
    console.log(`\n‚úÖ Checkout Session —Å–æ–∑–¥–∞–Ω–∞: ${session.id}`);
    console.log(`URL –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${session.url}`);
    console.log(`Automatic tax: ${session.automatic_tax.enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}`);
    
    return { customer, session };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Checkout Session:', error);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2];
  
  if (!command) {
    console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node stripe-tax-debug.js create-product "Product Name" price currency tax_behavior
  node stripe-tax-debug.js create-checkout-session product_id
  node stripe-tax-debug.js check-product product_id
  
–ü—Ä–∏–º–µ—Ä—ã:
  node stripe-tax-debug.js create-product "Test Product" 100 usd exclusive
  node stripe-tax-debug.js create-product "Test Product with VAT" 100 eur inclusive
  node stripe-tax-debug.js check-product prod_1234567890
  node stripe-tax-debug.js create-checkout-session price_1234567890
    `);
    return;
  }
  
  switch (command) {
    case 'create-product':
      const name = process.argv[3];
      const price = process.argv[4];
      const currency = process.argv[5] || 'usd';
      const tax_behavior = process.argv[6] || 'exclusive';
      
      if (!name || !price) {
        console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ü–µ–Ω—É');
        return;
      }
      
      await createProduct(name, price, currency, tax_behavior);
      break;
      
    case 'check-product':
      const productId = process.argv[3];
      
      if (!productId) {
        console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø—Ä–æ–¥—É–∫—Ç–∞');
        return;
      }
      
      await checkProduct(productId);
      break;
      
    case 'create-checkout-session':
      const priceId = process.argv[3];
      
      if (!priceId) {
        console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Ü–µ–Ω—ã');
        return;
      }
      
      await createCheckoutSession(priceId);
      break;
      
    default:
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
  }
}

main()
  .then(() => console.log('\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error));