/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏ —Å—É–º–º
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
 * –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è PaymentIntent –≤ Stripe —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node tax-calculation-tester.js [country] [amount] [currency]
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * node tax-calculation-tester.js DE 1000 eur  - —Ç–µ—Å—Ç –¥–ª—è –ì–µ—Ä–º–∞–Ω–∏–∏ (—Å—Ç–∞–≤–∫–∞ 19%)
 * node tax-calculation-tester.js US 1000 usd  - —Ç–µ—Å—Ç –¥–ª—è –°–®–ê (–±–µ–∑ –Ω–∞–ª–æ–≥–∞)
 * node tax-calculation-tester.js FR 1000 eur  - —Ç–µ—Å—Ç –¥–ª—è –§—Ä–∞–Ω—Ü–∏–∏ (—Å—Ç–∞–≤–∫–∞ 20%)
 */

import fetch from 'node-fetch';

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const country = process.argv[2] || 'DE';
const amount = parseInt(process.argv[3]) || 1000;
const currency = process.argv[4] || 'eur';

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
function formatCurrency(amount, currency) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency.toUpperCase()
  }).format(amount / 100);
}

// –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const expectedTaxRates = {
  DE: 0.19,  // 19% VAT in Germany
  FR: 0.20,  // 20% VAT in France
  IT: 0.22,  // 22% VAT in Italy
  ES: 0.21,  // 21% VAT in Spain
  GB: 0.20,  // 20% VAT in UK
  US: 0.00,  // No VAT in US
  CA: 0.05,  // 5% GST in Canada (simplified)
  AU: 0.10,  // 10% GST in Australia
};

async function testTaxCalculation() {
  console.log('\n===== Tax Calculation Test =====');
  console.log(`Country: ${country}`);
  console.log(`Amount: ${formatCurrency(amount, currency)}`);
  console.log(`Currency: ${currency.toUpperCase()}`);
  console.log('==============================\n');
  
  try {
    console.log('Creating payment intent with tax calculation...');
    const response = await fetch('http://localhost:5000/api/tax-debug/create-payment-intent', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        productId: 1,
        userId: 1,
        amount,
        currency,
        country
      })
    });
    
    if (!response.ok) {
      throw new Error(`Server error: ${response.status} ${response.statusText}`);
    }
    
    const result = await response.json();
    console.log('\n‚úÖ Payment Intent created successfully!');
    console.log(`Client Secret: ${result.clientSecret}`);
    console.log(`Order ID: ${result.orderId}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–æ–≥–æ–≤
    if (result.tax) {
      const { amount: taxAmount, rate: taxRate, label: taxLabel } = result.tax;
      const expectedRate = expectedTaxRates[country] || 0;
      const expectedTaxAmount = Math.round(amount * expectedRate);
      
      console.log('\nüìä Tax Information:');
      console.log(`- Tax Rate: ${(taxRate * 100).toFixed(2)}%`);
      console.log(`- Tax Amount: ${formatCurrency(taxAmount, currency)}`);
      console.log(`- Tax Description: ${taxLabel}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞
      console.log('\nüîç Validation:');
      if (Math.abs(taxRate - expectedRate) < 0.0001) {
        console.log(`‚úÖ Tax rate is correct: ${(taxRate * 100).toFixed(2)}% (expected ${(expectedRate * 100).toFixed(2)}%)`);
      } else {
        console.log(`‚ùå Tax rate is incorrect: ${(taxRate * 100).toFixed(2)}% (expected ${(expectedRate * 100).toFixed(2)}%)`);
      }
      
      if (taxAmount === expectedTaxAmount) {
        console.log(`‚úÖ Tax amount is correct: ${formatCurrency(taxAmount, currency)}`);
      } else {
        console.log(`‚ùå Tax amount is incorrect: ${formatCurrency(taxAmount, currency)} (expected ${formatCurrency(expectedTaxAmount, currency)})`);
      }
      
      // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
      const totalAmount = amount + taxAmount;
      console.log(`\nüí∞ Total amount: ${formatCurrency(totalAmount, currency)}`);
    } else {
      console.log('\n‚ùå No tax information returned from the server!');
    }
  } catch (error) {
    console.error('\n‚ùå Error:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTaxCalculation();