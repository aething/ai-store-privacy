/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 * 
 * –ó–∞–ø—É—Å–∫:
 * node circular-deps-finder.js client/src
 */

const fs = require('fs');
const path = require('path');

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
const importRegex = /import\s+(?:{[^}]*}|\*\s+as\s+[^,]*|[^,{}\s*]+)\s+from\s+['"]([^'"]+)['"]/g;

// –ö–∞—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –∏ –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const moduleMap = new Map();
// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const reactComponents = new Set();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ JavaScript/TypeScript –≤ –ø–∞–ø–∫–µ
function findFiles(dir, extensions) {
  if (!fs.existsSync(dir)) {
    console.error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${dir}`);
    process.exit(1);
  }

  let results = [];
  const list = fs.readdirSync(dir);
  
  list.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat && stat.isDirectory()) {
      results = results.concat(findFiles(filePath, extensions));
    } else {
      const ext = path.extname(filePath);
      if (extensions.includes(ext)) {
        results.push(filePath);
      }
    }
  });
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞
function resolvePath(importPath, currentFile) {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∏–∑ node_modules
  if (!importPath.startsWith('.') && !importPath.startsWith('/')) {
    return null;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
  const currentDir = path.dirname(currentFile);
  let resolvedPath;
  
  if (importPath.startsWith('.')) {
    // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    resolvedPath = path.resolve(currentDir, importPath);
  } else {
    // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    resolvedPath = path.resolve(process.cwd(), importPath.slice(1));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
  const extensions = ['.js', '.jsx', '.ts', '.tsx'];
  
  for (const ext of extensions) {
    if (fs.existsSync(resolvedPath + ext)) {
      return resolvedPath + ext;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ index —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  for (const ext of extensions) {
    const indexPath = path.join(resolvedPath, `index${ext}`);
    if (fs.existsSync(indexPath)) {
      return indexPath;
    }
  }
  
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ñ–∞–π–ª–∞
function analyzeFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const imports = [];
  let match;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
  if (content.includes('React') || content.includes('react') || 
      content.includes('function ') && content.includes('return (') ||
      content.includes('export default') && content.includes('return (')) {
    reactComponents.add(filePath);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤ —Ñ–∞–π–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–æ–≤
  if (content.includes('use') && 
      (content.includes('useState') || content.includes('useEffect') || 
       content.includes('useContext') || content.includes('useRef') || 
       content.includes('useCallback') || content.includes('useMemo'))) {
    // –í–µ—Ä–æ—è—Ç–Ω–æ, —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ö—É–∫–∏
    if (reactComponents.has(filePath) || filePath.includes('hooks')) {
      console.log(`\x1b[36m[Hook] ${filePath}\x1b[0m`);
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
  while ((match = importRegex.exec(content)) !== null) {
    const importPath = match[1];
    const resolvedPath = resolvePath(importPath, filePath);
    
    if (resolvedPath) {
      imports.push(resolvedPath);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –µ–≥–æ –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–∞—Ä—Ç—É –º–æ–¥—É–ª–µ–π
  moduleMap.set(filePath, imports);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function findCyclicDependencies(moduleMap) {
  const cyclicPaths = [];
  
  function dfs(currentModule, visited, path) {
    if (visited.has(currentModule)) {
      // –ù–∞—à–ª–∏ —Ü–∏–∫–ª
      const cycleStart = path.indexOf(currentModule);
      if (cycleStart !== -1) {
        cyclicPaths.push([...path.slice(cycleStart), currentModule]);
      }
      return;
    }
    
    visited.add(currentModule);
    path.push(currentModule);
    
    const dependencies = moduleMap.get(currentModule) || [];
    
    for (const dependency of dependencies) {
      dfs(dependency, new Set(visited), [...path]);
    }
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º DFS –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
  for (const [module] of moduleMap) {
    dfs(module, new Set(), []);
  }
  
  return cyclicPaths;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ö—É–∫–æ–≤ –≤ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
function analyzeHooksInCycles(cyclicPaths) {
  const hookProblems = [];
  
  for (const cycle of cyclicPaths) {
    const hooksInCycle = cycle.filter(file => 
      file.includes('hooks') || file.includes('Hook') || file.includes('hook')
    );
    
    if (hooksInCycle.length > 0) {
      hookProblems.push({
        cycle,
        hooksInCycle
      });
    }
  }
  
  return hookProblems;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const dir = process.argv[2] || 'client/src';
  const files = findFiles(dir, ['.js', '.jsx', '.ts', '.tsx']);
  
  console.log(`\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}...\n`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  files.forEach(file => {
    try {
      analyzeFile(file);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ ${file}:`, error);
    }
  });
  
  // –ò—â–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const cyclicPaths = findCyclicDependencies(moduleMap);
  
  if (cyclicPaths.length === 0) {
    console.log('‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!');
  } else {
    console.log(`\x1b[31m‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${cyclicPaths.length} —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!\x1b[0m\n`);
    
    cyclicPaths.forEach((cycle, i) => {
      console.log(`\x1b[33m–¶–∏–∫–ª #${i + 1}:\x1b[0m`);
      cycle.forEach((module, j) => {
        // –î–µ–ª–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        const relPath = path.relative(process.cwd(), module);
        if (j < cycle.length - 1) {
          console.log(`  ${relPath} ->`);
        } else {
          console.log(`  ${relPath} -> (—Ü–∏–∫–ª)`);
        }
      });
      console.log();
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ö—É–∫–∞–º–∏
    const hookProblems = analyzeHooksInCycles(cyclicPaths);
    
    if (hookProblems.length > 0) {
      console.log('\x1b[31müö® –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å —Ö—É–∫–∞–º–∏!\x1b[0m');
      console.log('–≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ "Invalid hook call" –≤ React.\n');
      
      hookProblems.forEach((problem, i) => {
        console.log(`\x1b[33m–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ö—É–∫–∞–º–∏ #${i + 1}:\x1b[0m`);
        console.log('–•—É–∫–∏ –≤ —Ü–∏–∫–ª–µ:');
        problem.hooksInCycle.forEach(hook => {
          const relPath = path.relative(process.cwd(), hook);
          console.log(`  - ${relPath}`);
        });
        console.log();
      });
      
      console.log('\x1b[32m–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\x1b[0m');
      console.log('1. –í—ã–Ω–µ—Å–∏—Ç–µ —Ö—É–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
      console.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏—Å—Ö–æ–¥—è—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∞ –Ω–µ –Ω–∞–æ–±–æ—Ä–æ—Ç');
      console.log('3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ React –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤');
      console.log('4. –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ\n');
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log(`\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  console.log(`React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${reactComponents.size}`);
  console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${cyclicPaths.length}`);
}

main();